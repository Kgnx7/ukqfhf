const postcss = require("postcss");
const postcssImport = require("postcss-import");
const postcssCsso = require("postcss-csso");
const htmlMinifier = require("html-minifier-terser");

const passthroughtCopyConfig = { "src/assets": "assets" };

const injectCssProcessing = (eleventyConfig) => {
  eleventyConfig.addTemplateFormats("css");
  eleventyConfig.addExtension("css", {
    outputFileExtension: "css",
    compile: async (content, path) => {
      if (path !== "./src/pages/main.css") {
        return;
      }

      return async () => {
        let output = await postcss([postcssImport, postcssCsso]).process(
          content,
          {
            from: path,
          }
        );

        return output.css;
      };
    },
  });
};

const injectHtmlProcessing = (eleventyConfig) => {
  eleventyConfig.addTransform("html-minify", (content, path) => {
    if (path && path.endsWith(".html")) {
      return htmlMinifier.minify(content, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
      });
    }

    return content;
  });
};

module.exports = function (eleventyConfig) {
  eleventyConfig.addPassthroughCopy(passthroughtCopyConfig);
  eleventyConfig.addWatchTarget("./src");

  injectCssProcessing(eleventyConfig);
  injectHtmlProcessing(eleventyConfig);

  return {
    dir: {
      input: "./src/pages",
      includes: "../shared",
    },
    templateFormats: ["njk", "md"],
  };
};
